/*
 * This file is generated by jOOQ.
 */
package com.htcmw.rebac.jooq.tables;


import com.htcmw.rebac.jooq.Keys;
import com.htcmw.rebac.jooq.Public;
import com.htcmw.rebac.jooq.tables.records.RelationTupleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RelationTuple extends TableImpl<RelationTupleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.relation_tuple</code>
     */
    public static final RelationTuple RELATION_TUPLE = new RelationTuple();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationTupleRecord> getRecordType() {
        return RelationTupleRecord.class;
    }

    /**
     * The column <code>public.relation_tuple.id</code>.
     */
    public final TableField<RelationTupleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.relation_tuple.resource</code>.
     */
    public final TableField<RelationTupleRecord, String> RESOURCE = createField(DSL.name("resource"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relation_tuple.relation</code>.
     */
    public final TableField<RelationTupleRecord, String> RELATION = createField(DSL.name("relation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relation_tuple.subject</code>.
     */
    public final TableField<RelationTupleRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.relation_tuple.created_at</code>.
     */
    public final TableField<RelationTupleRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private RelationTuple(Name alias, Table<RelationTupleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RelationTuple(Name alias, Table<RelationTupleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.relation_tuple</code> table reference
     */
    public RelationTuple(String alias) {
        this(DSL.name(alias), RELATION_TUPLE);
    }

    /**
     * Create an aliased <code>public.relation_tuple</code> table reference
     */
    public RelationTuple(Name alias) {
        this(alias, RELATION_TUPLE);
    }

    /**
     * Create a <code>public.relation_tuple</code> table reference
     */
    public RelationTuple() {
        this(DSL.name("relation_tuple"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RelationTupleRecord, Integer> getIdentity() {
        return (Identity<RelationTupleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RelationTupleRecord> getPrimaryKey() {
        return Keys.RELATION_TUPLE_PKEY;
    }

    @Override
    public List<UniqueKey<RelationTupleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_RELATION_TUPLE_RESOURCE_RELATION_SUBJECT);
    }

    @Override
    public RelationTuple as(String alias) {
        return new RelationTuple(DSL.name(alias), this);
    }

    @Override
    public RelationTuple as(Name alias) {
        return new RelationTuple(alias, this);
    }

    @Override
    public RelationTuple as(Table<?> alias) {
        return new RelationTuple(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelationTuple rename(String name) {
        return new RelationTuple(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelationTuple rename(Name name) {
        return new RelationTuple(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelationTuple rename(Table<?> name) {
        return new RelationTuple(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple where(Condition condition) {
        return new RelationTuple(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RelationTuple where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RelationTuple where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RelationTuple where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RelationTuple where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RelationTuple whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
